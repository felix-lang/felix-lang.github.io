#line 69 "openrecursion.fdoc"
typedef o_adde[T] = (
  | `Int of int
  | `Add of T * T
);
#line 79 "openrecursion.fdoc"
fun o_evala[T] (eval: T -> int) (term: o_adde[T]) =>
  match term with
  | `Int j => j
  | `Add (a,b) => eval a + eval b
  endmatch
;
#line 91 "openrecursion.fdoc"
typedef adde = o_adde[adde];
fun evala (term:adde):int => o_evala[adde] evala term;
#line 103 "openrecursion.fdoc"
var xa : adde = `Add (`Add (`Int 39, `Int 2), `Int 1);
var yaa = evala xa;
println$ "ya="+yaa.str;
#line 113 "openrecursion.fdoc"
typedef o_sube[T] = (
  | o_adde[T]
  | `Sub of T * T
);
fun o_evals[T] (eval: T -> int) (term: o_sube[T]):int =>
  match term with
  | `Sub (a,b) => eval a - eval b
  | o_adde[T] :>> k => o_evala eval k
  endmatch
;
#line 139 "openrecursion.fdoc"
typefun o_sube_f (T:TYPE) : TYPE => o_sube[T];
typedef sube = tfix<TYPE> o_sube_f;
fun evals (term:sube):int => (fix[sube,int] o_evals[sube]) term;
#line 160 "openrecursion.fdoc"
var xs : sube = `Add (`Sub (`Int 39, `Int 2), `Int 1);
var yss = evals xs;
var ysa = evals xa;  // ORGINAL DATA
println$ "ys="+yss.str;
println$ "ya="+ysa.str;
#line 187 "openrecursion.fdoc"
typedef o_mule[T] = (
  | o_adde[T]
  | `Mul of T * T
);
fun o_evalm[T] (eval: T -> int) (term: o_mule[T]):int =>
  match term with
  | `Mul(a,b) => eval a * eval b
  | o_adde[T] :>> k => o_evala eval k
  endmatch
;
typefun o_mule_f (T:TYPE) : TYPE => o_mule[T];
typedef mule = tfix<TYPE> o_mule_f;
fun evalm (term:mule):int => (fix[mule,int] o_evalm[mule]) term;
var xm : mule = `Add (`Mul(`Int 39, `Int 2), `Int 1);
var ymm = evalm xm;
var yma = evalm xa;  // ORGINAL DATA
println$ "ym="+ymm.str;
println$ "ya="+yma.str;
#line 211 "openrecursion.fdoc"
typedef o_dive[T] = (
  | o_sube[T]
  | o_mule[T]
  | `Div of T * T
);
fun o_evald[T] (eval: T -> int) (term: o_dive[T]):int =>
  match term with
  | `Div(a,b) => eval a / eval b
  | o_sube[T] :>> k => o_evals eval k
  | o_mule[T] :>> k => o_evalm eval k
  endmatch
;
typefun o_dive_f (T:TYPE) : TYPE => o_dive[T];
typedef dive = tfix<TYPE> o_dive_f;
fun evald (term:dive):int => (fix[dive,int] o_evald[dive]) term;
var xd : dive =
  `Add (
    `Mul (
      `Int 39,
      `Sub (
        `Int 3,
        `Div (`Int 2, `Int 2)
      )
    )
    ,
    `Int 66
  )
;
var ydd = evald xd;
var yda = evald xa;  // ORGINAL DATA
var yds = evald xs;  // ORGINAL DATA
var ydm = evald xm;  // ORGINAL DATA
println$ "yd="+ydd.str;
println$ "ya="+yda.str;
println$ "ys="+yds.str;
println$ "yn="+ydm.str;
